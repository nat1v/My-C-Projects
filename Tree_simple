#include <stdio.h>


struct Orang{
    char nama[11];
    int IndexOrtu;
  };

void kasiTab(struct Orang People[], int OrtuIndex)
{
    for (int i = 0; i < OrtuIndex; i++)
    {
        printf("%i. ", i+1);
        int Tab = 0; 
        int IndexSekarang = People[i].IndexOrtu;

        while (IndexSekarang != -1)
        {
            Tab++;
            IndexSekarang = People[IndexSekarang].IndexOrtu;
        } 
          
        
    for (int i = 0; i<Tab; i++)
    {
        printf("\t");
    }

        printf("%s\n", People[i].nama);
    } 
}

int main(){
  
  int a;
  printf("mau berapa people?: ");
  scanf("%i", &a);

  struct Orang *People;
  People = (struct Orang*) malloc(a * sizeof(struct Orang));
  int lastGeneration = -1;


  char garbage[1];

  for (int i = 0; i<a; i++)
  {
        gets(garbage);
        printf("index array ke: %i \n", i+1);
        printf("Nama: ");

        gets(People[i].nama);

        printf("Anak Ke Berapa? (-1 jika tidakpunya): ");
        scanf("%i", &People[i].IndexOrtu);
        printf("\n");
        

        if (People[i].IndexOrtu < -1 || People[i].IndexOrtu > i-1)
        {
            printf("mohon maaf bosq, Index Ortu hanya boleh diisi nilai dari (-1 sampai %i)\n", a-1);
            printf("coba untuk mengurutkan index ortu: -1, 0, 1, 2 dst. Jangan melompat\n");
            i = i-1;
            printf("\n");
        }  else 
            {
            // Implement the generational rule: if the last generation is -1, next must be -1 or previous + 1
            if (People[i].IndexOrtu == -1) 
            {
                // New generation, reset lastGeneration
                lastGeneration = -1;
            } else if (People[i].IndexOrtu == lastGeneration + 1) 
            {
                // Valid next generation
                lastGeneration++;
            } else 
            {
                // Invalid case: input is not following the sequence
                printf("Index Ortu harus mengikuti aturan: -1 untuk generasi pertama, atau %i untuk generasi berikutnya.\n", lastGeneration + 1);
                i--;  // Retry this person entry
            }
            }
  }
  
  
  printf("Pohon Keluarga: \n");
  kasiTab(People, a);

  return 0;
}
